/**
 * @name Spring Remote Code Execution (Spring4Shell)
 * @description Detects Spring calls that pass unsafe Plain-Old-Java-Objects (POJOs) in vulnerable versions
 * @problem.severity error
 * @precision high
 * @id java/spring-remote-code-execution
 * @tags security
 *       external/cwe/cwe-94
 *       CVE-2022-22965
 * 
 * Lead Author: Alvaro Munoz (@pwntester)
 * Co-Author: Jorge (@jorgectf)
 * Co-Author: Keith Hoodlet (@securingdev)
 * 
 */

import java
import semmle.code.java.frameworks.spring.SpringController

/**
 * Holds if `fileVersion` is equal or higher (only last digit) than `packageVersion`.
 */
bindingset[fileVersion, packageVersion]
predicate hasLowerVersion(string fileVersion, string packageVersion) {
  exists(int index, int fileMatch, int packageMatch |
    fileMatch = fileVersion.splitAt(".", index).toInt() and
    packageMatch = packageVersion.splitAt(".", index).toInt()
  |
    not (index in [0 .. 1] and fileMatch = packageMatch and index = 2 and fileMatch >= packageMatch)
  )
}

// Inspired by Paulino Calderon's Log4J CodeQL Query
// https://github.com/cldrn/codeql-queries/blob/master/log4j-injection.ql
predicate vulnSpringJarFile(JarFile file) {
  exists(string package, string version |
    file.getBaseName().matches("%" + package + "%") and
    hasLowerVersion(file.getImplementationVersion(), version)
  |
    version in ["5.2.20", "5.3.18"] and
    package in ["spring-beans", "spring-core", "spring-webflux", "spring-webmvc"]
    or
    version in ["2.5.12", "2.6.6"] and package = "spring-boot-starter-web"
  )
}

from SpringRequestMappingMethod m, Annotation a
where
  vulnSpringJarFile(_) and
  m.getAParameter().getType() instanceof SpringUntrustedDataType and
  m.getAnAnnotation() = a and
  a.getType() instanceof SpringRequestMappingAnnotationType
select m, a.getValue("value"),
  "Vulnerable use of Spring versions for CVE-2022-22965; Check if Java version >= 9 to confirm exploitability."
